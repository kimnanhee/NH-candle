
NH_candle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105b  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000990  00000000  00000000  00001383  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069b  00000000  00000000  00001d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  000023b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000074c  00000000  00000000  00002a22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  0000316e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	ac c0       	rjmp	.+344    	; 0x1a2 <__vector_18>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	72 d0       	rcall	.+228    	; 0x18e <main>
  aa:	88 c0       	rjmp	.+272    	; 0x1bc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ADC_set>:

void uart_string(char* str)
{
	while (*str)
	uart_write(*str++);
}
  ae:	80 e8       	ldi	r24, 0x80	; 128
  b0:	86 b9       	out	0x06, r24	; 6
  b2:	86 b1       	in	r24, 0x06	; 6
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	86 b9       	out	0x06, r24	; 6
  b8:	08 95       	ret

000000ba <LCD_rCommand>:
  ba:	1a ba       	out	0x1a, r1	; 26
  bc:	a8 98       	cbi	0x15, 0	; 21
  be:	a9 9a       	sbi	0x15, 1	; 21
  c0:	aa 9a       	sbi	0x15, 2	; 21
  c2:	85 e0       	ldi	r24, 0x05	; 5
  c4:	8a 95       	dec	r24
  c6:	f1 f7       	brne	.-4      	; 0xc4 <LCD_rCommand+0xa>
  c8:	00 00       	nop
  ca:	89 b3       	in	r24, 0x19	; 25
  cc:	95 e0       	ldi	r25, 0x05	; 5
  ce:	9a 95       	dec	r25
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_rCommand+0x14>
  d2:	00 00       	nop
  d4:	aa 98       	cbi	0x15, 2	; 21
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	9a bb       	out	0x1a, r25	; 26
  da:	95 e0       	ldi	r25, 0x05	; 5
  dc:	9a 95       	dec	r25
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_rCommand+0x22>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <LCD_wCommand>:
  e4:	a8 98       	cbi	0x15, 0	; 21
  e6:	a9 98       	cbi	0x15, 1	; 21
  e8:	aa 9a       	sbi	0x15, 2	; 21
  ea:	8b bb       	out	0x1b, r24	; 27
  ec:	85 e0       	ldi	r24, 0x05	; 5
  ee:	8a 95       	dec	r24
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_wCommand+0xa>
  f2:	00 00       	nop
  f4:	aa 98       	cbi	0x15, 2	; 21
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_wCommand+0x14>
  fc:	00 00       	nop
  fe:	08 95       	ret

00000100 <LCD_wBCommand>:
 100:	cf 93       	push	r28
 102:	c8 2f       	mov	r28, r24
 104:	04 c0       	rjmp	.+8      	; 0x10e <LCD_wBCommand+0xe>
 106:	85 e0       	ldi	r24, 0x05	; 5
 108:	8a 95       	dec	r24
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_wBCommand+0x8>
 10c:	00 00       	nop
 10e:	d5 df       	rcall	.-86     	; 0xba <LCD_rCommand>
 110:	88 23       	and	r24, r24
 112:	cc f3       	brlt	.-14     	; 0x106 <LCD_wBCommand+0x6>
 114:	a8 98       	cbi	0x15, 0	; 21
 116:	a9 98       	cbi	0x15, 1	; 21
 118:	aa 9a       	sbi	0x15, 2	; 21
 11a:	cb bb       	out	0x1b, r28	; 27
 11c:	85 e0       	ldi	r24, 0x05	; 5
 11e:	8a 95       	dec	r24
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_wBCommand+0x1e>
 122:	00 00       	nop
 124:	aa 98       	cbi	0x15, 2	; 21
 126:	85 e0       	ldi	r24, 0x05	; 5
 128:	8a 95       	dec	r24
 12a:	f1 f7       	brne	.-4      	; 0x128 <LCD_wBCommand+0x28>
 12c:	00 00       	nop
 12e:	cf 91       	pop	r28
 130:	08 95       	ret

00000132 <LCD_Init>:
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	81 ee       	ldi	r24, 0xE1	; 225
 136:	94 e0       	ldi	r25, 0x04	; 4
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <LCD_Init+0x6>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_Init+0x10>
 142:	00 00       	nop
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	ce df       	rcall	.-100    	; 0xe4 <LCD_wCommand>
 148:	8f e3       	ldi	r24, 0x3F	; 63
 14a:	9c e9       	ldi	r25, 0x9C	; 156
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <LCD_Init+0x1a>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Init+0x20>
 152:	00 00       	nop
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	c6 df       	rcall	.-116    	; 0xe4 <LCD_wCommand>
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Init+0x2a>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_Init+0x30>
 162:	00 00       	nop
 164:	88 e3       	ldi	r24, 0x38	; 56
 166:	be df       	rcall	.-132    	; 0xe4 <LCD_wCommand>
 168:	8f e1       	ldi	r24, 0x1F	; 31
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Init+0x3a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Init+0x40>
 172:	00 00       	nop
 174:	88 e3       	ldi	r24, 0x38	; 56
 176:	c4 df       	rcall	.-120    	; 0x100 <LCD_wBCommand>
 178:	8c e0       	ldi	r24, 0x0C	; 12
 17a:	c2 df       	rcall	.-124    	; 0x100 <LCD_wBCommand>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	c0 cf       	rjmp	.-128    	; 0x100 <LCD_wBCommand>
 180:	08 95       	ret

00000182 <uart_init>:
 182:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 186:	89 b9       	out	0x09, r24	; 9
 188:	88 e9       	ldi	r24, 0x98	; 152
 18a:	8a b9       	out	0x0a, r24	; 10
 18c:	08 95       	ret

0000018e <main>:
#include "lcd.h"
#include "uart.h"

int main(void)
{
    DDRA = 0xFF; // LCD 데이터 핀
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // LCD 제어 핀
 192:	84 bb       	out	0x14, r24	; 20
	
	LCD_Init();
 194:	ce df       	rcall	.-100    	; 0x132 <LCD_Init>
	ADC_set();
 196:	8b df       	rcall	.-234    	; 0xae <ADC_set>
 198:	87 e6       	ldi	r24, 0x67	; 103
	uart_init(BAUDRATE(9600));
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	f2 df       	rcall	.-28     	; 0x182 <uart_init>
 19e:	78 94       	sei
	sei();
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0x12>

000001a2 <__vector_18>:
 1a2:	1f 92       	push	r1
    while (1) 
    {
    }
}
ISR(USART0_RX_vect)
{
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
	unsigned char buff = UDR0; // UDR0에 레지스터에 데이터가 저장
 1ae:	8c b1       	in	r24, 0x0c	; 12
	
	if(buff == 0x02);
	else if(buff == 0x03);
}
 1b0:	8f 91       	pop	r24
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <_exit>:
 1bc:	f8 94       	cli

000001be <__stop_program>:
 1be:	ff cf       	rjmp	.-2      	; 0x1be <__stop_program>
