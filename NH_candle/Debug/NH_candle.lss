
NH_candle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000a4c  00000ae0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a4c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800128  00800128  00000b08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012c4  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ec  00000000  00000000  00001f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007b7  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  000030b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056c  00000000  00000000  00003264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009aa  00000000  00000000  000037d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000417a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	bf c1       	rjmp	.+894    	; 0x3c8 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e4       	ldi	r30, 0x4C	; 76
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 36       	cpi	r26, 0x64	; 100
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e7 d0       	rcall	.+462    	; 0x292 <main>
  c4:	c1 c4       	rjmp	.+2434   	; 0xa48 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_set>:
	
	_delay_us(1);
}
void LCD_setcursor(char col, char row)
{
	LCD_wBCommand(0x80 | col * 0x40 + row);
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	86 b9       	out	0x06, r24	; 6
  cc:	86 b1       	in	r24, 0x06	; 6
  ce:	87 60       	ori	r24, 0x07	; 7
  d0:	86 b9       	out	0x06, r24	; 6
  d2:	08 95       	ret

000000d4 <ADC_read>:
  d4:	90 e4       	ldi	r25, 0x40	; 64
  d6:	97 b9       	out	0x07, r25	; 7
  d8:	97 b1       	in	r25, 0x07	; 7
  da:	89 2b       	or	r24, r25
  dc:	87 b9       	out	0x07, r24	; 7
  de:	36 9a       	sbi	0x06, 6	; 6
  e0:	36 99       	sbic	0x06, 6	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <ADC_read+0xc>
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	95 b1       	in	r25, 0x05	; 5
  e8:	08 95       	ret

000000ea <Request>:
  ea:	88 9a       	sbi	0x11, 0	; 17
  ec:	90 98       	cbi	0x12, 0	; 18
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	89 ef       	ldi	r24, 0xF9	; 249
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <Request+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <Request+0x14>
  fe:	00 00       	nop
 100:	90 9a       	sbi	0x12, 0	; 18
 102:	08 95       	ret

00000104 <Response>:
 104:	88 98       	cbi	0x11, 0	; 17
 106:	80 99       	sbic	0x10, 0	; 16
 108:	fe cf       	rjmp	.-4      	; 0x106 <Response+0x2>
 10a:	80 9b       	sbis	0x10, 0	; 16
 10c:	fe cf       	rjmp	.-4      	; 0x10a <Response+0x6>
 10e:	80 99       	sbic	0x10, 0	; 16
 110:	fe cf       	rjmp	.-4      	; 0x10e <Response+0xa>
 112:	08 95       	ret

00000114 <Receive_data>:
 114:	88 e0       	ldi	r24, 0x08	; 8
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	80 9b       	sbis	0x10, 0	; 16
 11a:	fe cf       	rjmp	.-4      	; 0x118 <Receive_data+0x4>
 11c:	20 ea       	ldi	r18, 0xA0	; 160
 11e:	2a 95       	dec	r18
 120:	f1 f7       	brne	.-4      	; 0x11e <Receive_data+0xa>
 122:	80 9b       	sbis	0x10, 0	; 16
 124:	07 c0       	rjmp	.+14     	; 0x134 <Receive_data+0x20>
 126:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <c>
 12a:	22 0f       	add	r18, r18
 12c:	21 60       	ori	r18, 0x01	; 1
 12e:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <c>
 132:	05 c0       	rjmp	.+10     	; 0x13e <Receive_data+0x2a>
 134:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <c>
 138:	22 0f       	add	r18, r18
 13a:	20 93 2c 01 	sts	0x012C, r18	; 0x80012c <c>
 13e:	80 99       	sbic	0x10, 0	; 16
 140:	fe cf       	rjmp	.-4      	; 0x13e <Receive_data+0x2a>
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	49 f7       	brne	.-46     	; 0x118 <Receive_data+0x4>
 146:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <c>
 14a:	08 95       	ret

0000014c <LCD_rCommand>:
 14c:	1a ba       	out	0x1a, r1	; 26
 14e:	a8 98       	cbi	0x15, 0	; 21
 150:	a9 9a       	sbi	0x15, 1	; 21
 152:	aa 9a       	sbi	0x15, 2	; 21
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_rCommand+0xa>
 15a:	00 00       	nop
 15c:	89 b3       	in	r24, 0x19	; 25
 15e:	95 e0       	ldi	r25, 0x05	; 5
 160:	9a 95       	dec	r25
 162:	f1 f7       	brne	.-4      	; 0x160 <LCD_rCommand+0x14>
 164:	00 00       	nop
 166:	aa 98       	cbi	0x15, 2	; 21
 168:	9f ef       	ldi	r25, 0xFF	; 255
 16a:	9a bb       	out	0x1a, r25	; 26
 16c:	95 e0       	ldi	r25, 0x05	; 5
 16e:	9a 95       	dec	r25
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_rCommand+0x22>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_wCommand>:
 176:	a8 98       	cbi	0x15, 0	; 21
 178:	a9 98       	cbi	0x15, 1	; 21
 17a:	aa 9a       	sbi	0x15, 2	; 21
 17c:	8b bb       	out	0x1b, r24	; 27
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	8a 95       	dec	r24
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_wCommand+0xa>
 184:	00 00       	nop
 186:	aa 98       	cbi	0x15, 2	; 21
 188:	85 e0       	ldi	r24, 0x05	; 5
 18a:	8a 95       	dec	r24
 18c:	f1 f7       	brne	.-4      	; 0x18a <LCD_wCommand+0x14>
 18e:	00 00       	nop
 190:	08 95       	ret

00000192 <LCD_wBCommand>:
 192:	cf 93       	push	r28
 194:	c8 2f       	mov	r28, r24
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <LCD_wBCommand+0xe>
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCD_wBCommand+0x8>
 19e:	00 00       	nop
 1a0:	d5 df       	rcall	.-86     	; 0x14c <LCD_rCommand>
 1a2:	88 23       	and	r24, r24
 1a4:	cc f3       	brlt	.-14     	; 0x198 <LCD_wBCommand+0x6>
 1a6:	a8 98       	cbi	0x15, 0	; 21
 1a8:	a9 98       	cbi	0x15, 1	; 21
 1aa:	aa 9a       	sbi	0x15, 2	; 21
 1ac:	cb bb       	out	0x1b, r28	; 27
 1ae:	85 e0       	ldi	r24, 0x05	; 5
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_wBCommand+0x1e>
 1b4:	00 00       	nop
 1b6:	aa 98       	cbi	0x15, 2	; 21
 1b8:	85 e0       	ldi	r24, 0x05	; 5
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_wBCommand+0x28>
 1be:	00 00       	nop
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	81 ee       	ldi	r24, 0xE1	; 225
 1c8:	94 e0       	ldi	r25, 0x04	; 4
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <LCD_Init+0x6>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_Init+0x10>
 1d4:	00 00       	nop

// 텍스트 LCD를 초기화하는 함수
void LCD_Init(void){
	_delay_ms(100);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 1d6:	88 e3       	ldi	r24, 0x38	; 56
 1d8:	ce df       	rcall	.-100    	; 0x176 <LCD_wCommand>
 1da:	8f e3       	ldi	r24, 0x3F	; 63
 1dc:	9c e9       	ldi	r25, 0x9C	; 156
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <LCD_Init+0x1a>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <LCD_Init+0x20>
 1e4:	00 00       	nop
	_delay_ms(10);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 1e6:	88 e3       	ldi	r24, 0x38	; 56
 1e8:	c6 df       	rcall	.-116    	; 0x176 <LCD_wCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	8f e1       	ldi	r24, 0x1F	; 31
 1ec:	93 e0       	ldi	r25, 0x03	; 3
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Init+0x2a>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Init+0x30>
	_delay_us(200);
	// 비지 플래그를 체크하지 않는 Function Set
	LCD_wCommand(0x38);
 1f4:	00 00       	nop
 1f6:	88 e3       	ldi	r24, 0x38	; 56
 1f8:	be df       	rcall	.-132    	; 0x176 <LCD_wCommand>
 1fa:	8f e1       	ldi	r24, 0x1F	; 31
 1fc:	93 e0       	ldi	r25, 0x03	; 3
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_Init+0x3a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_Init+0x40>
	_delay_us(200);
	
	// 비지 플래그를 체크하는 Function Set
	LCD_wBCommand(0x38);
 204:	00 00       	nop
 206:	88 e3       	ldi	r24, 0x38	; 56
	// 비지 플래그를 체크하는 Display On/Off Control
	LCD_wBCommand(0x0c);
 208:	c4 df       	rcall	.-120    	; 0x192 <LCD_wBCommand>
 20a:	8c e0       	ldi	r24, 0x0C	; 12
 20c:	c2 df       	rcall	.-124    	; 0x192 <LCD_wBCommand>
	// 비지 플래그를 체크하는 Clear Display
	LCD_wBCommand(0x01);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	c0 cf       	rjmp	.-128    	; 0x192 <LCD_wBCommand>
 212:	08 95       	ret

00000214 <LCD_wData>:
 214:	cf 93       	push	r28
}

// 텍스트 LCD에 1바이트 데이터를 출력하는 함수
void LCD_wData(char dat){
 216:	c8 2f       	mov	r28, r24
	while(LCD_BusyCheck(LCD_rCommand()))
 218:	04 c0       	rjmp	.+8      	; 0x222 <LCD_wData+0xe>
 21a:	85 e0       	ldi	r24, 0x05	; 5
 21c:	8a 95       	dec	r24
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_wData+0x8>
 220:	00 00       	nop
 222:	94 df       	rcall	.-216    	; 0x14c <LCD_rCommand>
 224:	88 23       	and	r24, r24
 226:	cc f3       	brlt	.-14     	; 0x21a <LCD_wData+0x6>
	_delay_us(1);
	
	sbi(LCD_CON, LCD_RS); // 0번 비트 설정, RS = 1, 데이터
 228:	a8 9a       	sbi	0x15, 0	; 21
	cbi(LCD_CON, LCD_RW); // 1번 비트 클리어, RW = 0, 쓰기
 22a:	a9 98       	cbi	0x15, 1	; 21
	sbi(LCD_CON, LCD_E); // 2번 비트 설정, E = 1
 22c:	aa 9a       	sbi	0x15, 2	; 21
	
	LCD_DATA = dat;       // 데이터 출력
 22e:	cb bb       	out	0x1b, r28	; 27
 230:	85 e0       	ldi	r24, 0x05	; 5
 232:	8a 95       	dec	r24
 234:	f1 f7       	brne	.-4      	; 0x232 <LCD_wData+0x1e>
 236:	00 00       	nop
	_delay_us(1);
	cbi(LCD_CON, LCD_E);  // 데이터 쓰기 동작 끝
 238:	aa 98       	cbi	0x15, 2	; 21
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	8a 95       	dec	r24
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_wData+0x28>
 240:	00 00       	nop
	
	_delay_us(1);
}
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_wString>:

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
	while(*str)
 24c:	88 81       	ld	r24, Y
 24e:	88 23       	and	r24, r24
 250:	29 f0       	breq	.+10     	; 0x25c <LCD_wString+0x16>
 252:	21 96       	adiw	r28, 0x01	; 1
	LCD_wData(*str++);
 254:	df df       	rcall	.-66     	; 0x214 <LCD_wData>
	_delay_us(1);
}

// 텍스트 LCD에 문자열을 출력하는 함수
void LCD_wString(char *str){
	while(*str)
 256:	89 91       	ld	r24, Y+
 258:	81 11       	cpse	r24, r1
 25a:	fc cf       	rjmp	.-8      	; 0x254 <LCD_wString+0xe>
	LCD_wData(*str++);
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <uart_init>:
#ifndef UART_H_
#define UART_H_

void uart_init(unsigned int baud) // baudrate 속도 설정
{
	UBRR0H = (unsigned char)(baud >> 8);
 262:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)baud;
 266:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0); // 7 bit : 인터럽트 활성화
 268:	88 e9       	ldi	r24, 0x98	; 152
 26a:	8a b9       	out	0x0a, r24	; 10
 26c:	08 95       	ret

0000026e <uart_write>:
}
void uart_write(unsigned char data) // uart로 데이터 전송
{
	while (!(UCSR0A & (1 << UDRE0)));
 26e:	5d 9b       	sbis	0x0b, 5	; 11
 270:	fe cf       	rjmp	.-4      	; 0x26e <uart_write>
	UDR0 = data;
 272:	8c b9       	out	0x0c, r24	; 12
 274:	08 95       	ret

00000276 <uart_string>:
}

void uart_string(char* str)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
	while (*str)
 27c:	88 81       	ld	r24, Y
 27e:	88 23       	and	r24, r24
 280:	29 f0       	breq	.+10     	; 0x28c <uart_string+0x16>
 282:	21 96       	adiw	r28, 0x01	; 1
	uart_write(*str++);
 284:	f4 df       	rcall	.-24     	; 0x26e <uart_write>
	UDR0 = data;
}

void uart_string(char* str)
{
	while (*str)
 286:	89 91       	ld	r24, Y+
 288:	81 11       	cpse	r24, r1
 28a:	fc cf       	rjmp	.-8      	; 0x284 <uart_string+0xe>
	uart_write(*str++);
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <main>:

int uart_finish=0, uart_i=0, uart_state=0;
char uart_buff[50];

int main(void)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	cd b7       	in	r28, 0x3d	; 61
 298:	de b7       	in	r29, 0x3e	; 62
 29a:	e2 97       	sbiw	r28, 0x32	; 50
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	f8 94       	cli
 2a0:	de bf       	out	0x3e, r29	; 62
 2a2:	0f be       	out	0x3f, r0	; 63
 2a4:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF; // LCD data 핀
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF; // LCD control 핀
 2aa:	84 bb       	out	0x14, r24	; 20
	
	DDRB = 0xFF; // RGB LED
 2ac:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00; // DHT
 2ae:	11 ba       	out	0x11, r1	; 17
	DDRF = 0x00; // cds, sound
 2b0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	
	LCD_Init();
 2b4:	87 df       	rcall	.-242    	; 0x1c4 <LCD_Init>
	ADC_set();
 2b6:	08 df       	rcall	.-496    	; 0xc8 <ADC_set>
 2b8:	87 e6       	ldi	r24, 0x67	; 103
	uart_init(BAUDRATE(9600));
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	d2 df       	rcall	.-92     	; 0x262 <uart_init>
 2be:	78 94       	sei
	sei();
 2c0:	c1 2c       	mov	r12, r1
	
	int cds_value; // CDS ADC값 저장
	char sound_value; // sound 센서 값 저장
	uint8_t I_RH, D_RH, I_Temp, D_Temp, CheckSum;
	
	int time_cnt=0; // 0.1초마다 cnt++, 2초마다 DHT 센서값을 읽어오기 위해서 사용
 2c2:	d1 2c       	mov	r13, r1
 2c4:	01 e0       	ldi	r16, 0x01	; 1
	LCD_Init();
	ADC_set();
	uart_init(BAUDRATE(9600));
	sei();
	
	int mode = 1;
 2c6:	10 e0       	ldi	r17, 0x00	; 0
 2c8:	0f 2e       	mov	r0, r31
		sound_value = (PINF & 0x02);
		
		if(sound_value == 0x00) mode++;
		if(mode > 3) mode = 1;
		
		sprintf(buff, "mode %d", mode); // LCD에 현재 모드 출력
 2ca:	f0 e0       	ldi	r31, 0x00	; 0
 2cc:	8f 2e       	mov	r8, r31
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	9f 2e       	mov	r9, r31
 2d2:	f0 2d       	mov	r31, r0
 2d4:	ce 01       	movw	r24, r28
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	7c 01       	movw	r14, r24
 2da:	0f 2e       	mov	r0, r31
				uart_string(buff);
			}
			time_cnt = 0;
		}
		
		sprintf("T%2d.%d H%2d.%d C%4d M%1d", I_Temp, D_Temp, I_RH, D_RH, cds_value, mode);
 2dc:	fe e0       	ldi	r31, 0x0E	; 14
 2de:	af 2e       	mov	r10, r31
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	bf 2e       	mov	r11, r31
 2e4:	f0 2d       	mov	r31, r0
	
	int time_cnt=0; // 0.1초마다 cnt++, 2초마다 DHT 센서값을 읽어오기 위해서 사용
	
    while (1) 
    {
		cds_value = ADC_read(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	f5 de       	rcall	.-534    	; 0xd4 <ADC_read>
 2ea:	78 2e       	mov	r7, r24
 2ec:	69 2e       	mov	r6, r25
 2ee:	01 99       	sbic	0x00, 1	; 0
		sound_value = (PINF & 0x02);
		
		if(sound_value == 0x00) mode++;
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <main+0x64>
 2f2:	0f 5f       	subi	r16, 0xFF	; 255
 2f4:	1f 4f       	sbci	r17, 0xFF	; 255
 2f6:	04 30       	cpi	r16, 0x04	; 4
		if(mode > 3) mode = 1;
 2f8:	11 05       	cpc	r17, r1
 2fa:	14 f0       	brlt	.+4      	; 0x300 <main+0x6e>
 2fc:	01 e0       	ldi	r16, 0x01	; 1
 2fe:	10 e0       	ldi	r17, 0x00	; 0
 300:	1f 93       	push	r17
		
		sprintf(buff, "mode %d", mode); // LCD에 현재 모드 출력
 302:	0f 93       	push	r16
 304:	9f 92       	push	r9
 306:	8f 92       	push	r8
 308:	ff 92       	push	r15
 30a:	ef 92       	push	r14
 30c:	c2 d0       	rcall	.+388    	; 0x492 <sprintf>
		LCD_wString(buff);
 30e:	c7 01       	movw	r24, r14
 310:	9a df       	rcall	.-204    	; 0x246 <LCD_wString>
 312:	0f 90       	pop	r0
		
		if(time_cnt >= 20) // 2초마다 DHT센서값 측정
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	0f 90       	pop	r0
 31e:	94 e1       	ldi	r25, 0x14	; 20
 320:	c9 16       	cp	r12, r25
		{
			Request();		 //시작 펄스 신호 보냄
 322:	d1 04       	cpc	r13, r1
			Response();		 //센서로부터 응답 받음
 324:	74 f1       	brlt	.+92     	; 0x382 <main+0xf0>
			I_RH=Receive_data();	 //습도의 정수 부분
 326:	e1 de       	rcall	.-574    	; 0xea <Request>
 328:	ed de       	rcall	.-550    	; 0x104 <Response>
			D_RH=Receive_data();	 //습도의 실수 부분
 32a:	f4 de       	rcall	.-536    	; 0x114 <Receive_data>
 32c:	58 2e       	mov	r5, r24
 32e:	f2 de       	rcall	.-540    	; 0x114 <Receive_data>
			I_Temp=Receive_data();	 //온도의 정수 부분
 330:	48 2e       	mov	r4, r24
 332:	f0 de       	rcall	.-544    	; 0x114 <Receive_data>
 334:	38 2e       	mov	r3, r24
			D_Temp=Receive_data();	 //온도의 실수 부분
 336:	ee de       	rcall	.-548    	; 0x114 <Receive_data>
 338:	28 2e       	mov	r2, r24
 33a:	ec de       	rcall	.-552    	; 0x114 <Receive_data>
			CheckSum=Receive_data(); //모든 세그먼트의 체크섬
 33c:	24 2d       	mov	r18, r4
 33e:	30 e0       	ldi	r19, 0x00	; 0
			
			if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum) // DHT 센서값 측정 오류
 340:	25 0d       	add	r18, r5
 342:	31 1d       	adc	r19, r1
 344:	23 0d       	add	r18, r3
 346:	31 1d       	adc	r19, r1
 348:	22 0d       	add	r18, r2
 34a:	31 1d       	adc	r19, r1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	28 17       	cp	r18, r24
 350:	39 07       	cpc	r19, r25
 352:	a9 f0       	breq	.+42     	; 0x37e <main+0xec>
 354:	86 e0       	ldi	r24, 0x06	; 6
			{
				I_Temp = D_Temp = I_RH = D_RH = -1;
				sprintf(buff, "error");
 356:	e8 e0       	ldi	r30, 0x08	; 8
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	d7 01       	movw	r26, r14
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0xca>
 364:	c7 01       	movw	r24, r14
				uart_string(buff);
 366:	87 df       	rcall	.-242    	; 0x276 <uart_string>
 368:	c1 2c       	mov	r12, r1
 36a:	d1 2c       	mov	r13, r1
			}
			time_cnt = 0;
 36c:	22 24       	eor	r2, r2
 36e:	2a 94       	dec	r2
			D_Temp=Receive_data();	 //온도의 실수 부분
			CheckSum=Receive_data(); //모든 세그먼트의 체크섬
			
			if ((I_RH + D_RH + I_Temp + D_Temp) != CheckSum) // DHT 센서값 측정 오류
			{
				I_Temp = D_Temp = I_RH = D_RH = -1;
 370:	33 24       	eor	r3, r3
 372:	3a 94       	dec	r3
 374:	44 24       	eor	r4, r4
 376:	4a 94       	dec	r4
 378:	55 24       	eor	r5, r5
 37a:	5a 94       	dec	r5
 37c:	02 c0       	rjmp	.+4      	; 0x382 <main+0xf0>
 37e:	c1 2c       	mov	r12, r1
 380:	d1 2c       	mov	r13, r1
				sprintf(buff, "error");
				uart_string(buff);
			}
			time_cnt = 0;
 382:	1f 93       	push	r17
 384:	0f 93       	push	r16
		}
		
		sprintf("T%2d.%d H%2d.%d C%4d M%1d", I_Temp, D_Temp, I_RH, D_RH, cds_value, mode);
 386:	6f 92       	push	r6
 388:	7f 92       	push	r7
 38a:	1f 92       	push	r1
 38c:	4f 92       	push	r4
 38e:	1f 92       	push	r1
 390:	5f 92       	push	r5
 392:	1f 92       	push	r1
 394:	2f 92       	push	r2
 396:	1f 92       	push	r1
 398:	3f 92       	push	r3
 39a:	bf 92       	push	r11
 39c:	af 92       	push	r10
 39e:	79 d0       	rcall	.+242    	; 0x492 <sprintf>
 3a0:	c7 01       	movw	r24, r14
		uart_string(buff);
 3a2:	69 df       	rcall	.-302    	; 0x276 <uart_string>
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	81 ee       	ldi	r24, 0xE1	; 225
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3a8:	94 e0       	ldi	r25, 0x04	; 4
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x118>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x122>
 3b4:	00 00       	nop
 3b6:	2f ef       	ldi	r18, 0xFF	; 255
 3b8:	c2 1a       	sub	r12, r18
		
		_delay_ms(100); // 0.1초 딜레이
		time_cnt++;
 3ba:	d2 0a       	sbc	r13, r18
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	f8 94       	cli
    }
 3c0:	de bf       	out	0x3e, r29	; 62
 3c2:	0f be       	out	0x3f, r0	; 63
 3c4:	cd bf       	out	0x3d, r28	; 61
 3c6:	8f cf       	rjmp	.-226    	; 0x2e6 <main+0x54>

000003c8 <__vector_18>:
 3c8:	1f 92       	push	r1
 3ca:	0f 92       	push	r0
}
ISR(USART0_RX_vect)
{
 3cc:	0f b6       	in	r0, 0x3f	; 63
 3ce:	0f 92       	push	r0
 3d0:	11 24       	eor	r1, r1
 3d2:	0b b6       	in	r0, 0x3b	; 59
 3d4:	0f 92       	push	r0
 3d6:	2f 93       	push	r18
 3d8:	3f 93       	push	r19
 3da:	4f 93       	push	r20
 3dc:	5f 93       	push	r21
 3de:	6f 93       	push	r22
 3e0:	7f 93       	push	r23
 3e2:	8f 93       	push	r24
 3e4:	9f 93       	push	r25
 3e6:	af 93       	push	r26
 3e8:	bf 93       	push	r27
 3ea:	ef 93       	push	r30
 3ec:	ff 93       	push	r31
	unsigned char buff = UDR0; // UDR0에 레지스터에 데이터가 저장
 3ee:	8c b1       	in	r24, 0x0c	; 12
	
	if(buff == 0x02)
 3f0:	82 30       	cpi	r24, 0x02	; 2
 3f2:	c9 f4       	brne	.+50     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	{
		uart_state = 1;
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__data_end+0x1>
 3fc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end>
		memset(uart_buff, 0, strlen(uart_buff));
 400:	ed e2       	ldi	r30, 0x2D	; 45
 402:	f1 e0       	ldi	r31, 0x01	; 1
 404:	01 90       	ld	r0, Z+
 406:	00 20       	and	r0, r0
 408:	e9 f7       	brne	.-6      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40a:	31 97       	sbiw	r30, 0x01	; 1
 40c:	af 01       	movw	r20, r30
 40e:	4d 52       	subi	r20, 0x2D	; 45
 410:	51 40       	sbci	r21, 0x01	; 1
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	8d e2       	ldi	r24, 0x2D	; 45
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	34 d0       	rcall	.+104    	; 0x484 <memset>
		uart_i = 0;
 41c:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <uart_i+0x1>
 420:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <uart_i>
		return;
 424:	1c c0       	rjmp	.+56     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	else if(buff == 0x03)
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	29 f4       	brne	.+10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		uart_state = 0;
 42a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__data_end+0x1>
 42e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <__data_end>
 432:	15 c0       	rjmp	.+42     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	}
	
	if(uart_state)
 434:	20 91 28 01 	lds	r18, 0x0128	; 0x800128 <__data_end>
 438:	30 91 29 01 	lds	r19, 0x0129	; 0x800129 <__data_end+0x1>
 43c:	23 2b       	or	r18, r19
 43e:	79 f0       	breq	.+30     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		uart_buff[uart_i++] = buff;
 440:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <uart_i>
 444:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <uart_i+0x1>
 448:	a9 01       	movw	r20, r18
 44a:	4f 5f       	subi	r20, 0xFF	; 255
 44c:	5f 4f       	sbci	r21, 0xFF	; 255
 44e:	50 93 2b 01 	sts	0x012B, r21	; 0x80012b <uart_i+0x1>
 452:	40 93 2a 01 	sts	0x012A, r20	; 0x80012a <uart_i>
 456:	f9 01       	movw	r30, r18
 458:	e3 5d       	subi	r30, 0xD3	; 211
 45a:	fe 4f       	sbci	r31, 0xFE	; 254
 45c:	80 83       	st	Z, r24
	}
}
 45e:	ff 91       	pop	r31
 460:	ef 91       	pop	r30
 462:	bf 91       	pop	r27
 464:	af 91       	pop	r26
 466:	9f 91       	pop	r25
 468:	8f 91       	pop	r24
 46a:	7f 91       	pop	r23
 46c:	6f 91       	pop	r22
 46e:	5f 91       	pop	r21
 470:	4f 91       	pop	r20
 472:	3f 91       	pop	r19
 474:	2f 91       	pop	r18
 476:	0f 90       	pop	r0
 478:	0b be       	out	0x3b, r0	; 59
 47a:	0f 90       	pop	r0
 47c:	0f be       	out	0x3f, r0	; 63
 47e:	0f 90       	pop	r0
 480:	1f 90       	pop	r1
 482:	18 95       	reti

00000484 <memset>:
 484:	dc 01       	movw	r26, r24
 486:	01 c0       	rjmp	.+2      	; 0x48a <memset+0x6>
 488:	6d 93       	st	X+, r22
 48a:	41 50       	subi	r20, 0x01	; 1
 48c:	50 40       	sbci	r21, 0x00	; 0
 48e:	e0 f7       	brcc	.-8      	; 0x488 <memset+0x4>
 490:	08 95       	ret

00000492 <sprintf>:
 492:	0f 93       	push	r16
 494:	1f 93       	push	r17
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	2e 97       	sbiw	r28, 0x0e	; 14
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	0d 89       	ldd	r16, Y+21	; 0x15
 4ac:	1e 89       	ldd	r17, Y+22	; 0x16
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	8c 83       	std	Y+4, r24	; 0x04
 4b2:	1a 83       	std	Y+2, r17	; 0x02
 4b4:	09 83       	std	Y+1, r16	; 0x01
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	9f e7       	ldi	r25, 0x7F	; 127
 4ba:	9e 83       	std	Y+6, r25	; 0x06
 4bc:	8d 83       	std	Y+5, r24	; 0x05
 4be:	ae 01       	movw	r20, r28
 4c0:	47 5e       	subi	r20, 0xE7	; 231
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	6f 89       	ldd	r22, Y+23	; 0x17
 4c6:	78 8d       	ldd	r23, Y+24	; 0x18
 4c8:	ce 01       	movw	r24, r28
 4ca:	01 96       	adiw	r24, 0x01	; 1
 4cc:	10 d0       	rcall	.+32     	; 0x4ee <vfprintf>
 4ce:	ef 81       	ldd	r30, Y+7	; 0x07
 4d0:	f8 85       	ldd	r31, Y+8	; 0x08
 4d2:	e0 0f       	add	r30, r16
 4d4:	f1 1f       	adc	r31, r17
 4d6:	10 82       	st	Z, r1
 4d8:	2e 96       	adiw	r28, 0x0e	; 14
 4da:	0f b6       	in	r0, 0x3f	; 63
 4dc:	f8 94       	cli
 4de:	de bf       	out	0x3e, r29	; 62
 4e0:	0f be       	out	0x3f, r0	; 63
 4e2:	cd bf       	out	0x3d, r28	; 61
 4e4:	df 91       	pop	r29
 4e6:	cf 91       	pop	r28
 4e8:	1f 91       	pop	r17
 4ea:	0f 91       	pop	r16
 4ec:	08 95       	ret

000004ee <vfprintf>:
 4ee:	2f 92       	push	r2
 4f0:	3f 92       	push	r3
 4f2:	4f 92       	push	r4
 4f4:	5f 92       	push	r5
 4f6:	6f 92       	push	r6
 4f8:	7f 92       	push	r7
 4fa:	8f 92       	push	r8
 4fc:	9f 92       	push	r9
 4fe:	af 92       	push	r10
 500:	bf 92       	push	r11
 502:	cf 92       	push	r12
 504:	df 92       	push	r13
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	cd b7       	in	r28, 0x3d	; 61
 514:	de b7       	in	r29, 0x3e	; 62
 516:	2b 97       	sbiw	r28, 0x0b	; 11
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	f8 94       	cli
 51c:	de bf       	out	0x3e, r29	; 62
 51e:	0f be       	out	0x3f, r0	; 63
 520:	cd bf       	out	0x3d, r28	; 61
 522:	6c 01       	movw	r12, r24
 524:	7b 01       	movw	r14, r22
 526:	8a 01       	movw	r16, r20
 528:	fc 01       	movw	r30, r24
 52a:	17 82       	std	Z+7, r1	; 0x07
 52c:	16 82       	std	Z+6, r1	; 0x06
 52e:	83 81       	ldd	r24, Z+3	; 0x03
 530:	81 ff       	sbrs	r24, 1
 532:	bf c1       	rjmp	.+894    	; 0x8b2 <vfprintf+0x3c4>
 534:	ce 01       	movw	r24, r28
 536:	01 96       	adiw	r24, 0x01	; 1
 538:	3c 01       	movw	r6, r24
 53a:	f6 01       	movw	r30, r12
 53c:	93 81       	ldd	r25, Z+3	; 0x03
 53e:	f7 01       	movw	r30, r14
 540:	93 fd       	sbrc	r25, 3
 542:	85 91       	lpm	r24, Z+
 544:	93 ff       	sbrs	r25, 3
 546:	81 91       	ld	r24, Z+
 548:	7f 01       	movw	r14, r30
 54a:	88 23       	and	r24, r24
 54c:	09 f4       	brne	.+2      	; 0x550 <vfprintf+0x62>
 54e:	ad c1       	rjmp	.+858    	; 0x8aa <vfprintf+0x3bc>
 550:	85 32       	cpi	r24, 0x25	; 37
 552:	39 f4       	brne	.+14     	; 0x562 <vfprintf+0x74>
 554:	93 fd       	sbrc	r25, 3
 556:	85 91       	lpm	r24, Z+
 558:	93 ff       	sbrs	r25, 3
 55a:	81 91       	ld	r24, Z+
 55c:	7f 01       	movw	r14, r30
 55e:	85 32       	cpi	r24, 0x25	; 37
 560:	21 f4       	brne	.+8      	; 0x56a <vfprintf+0x7c>
 562:	b6 01       	movw	r22, r12
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	d6 d1       	rcall	.+940    	; 0x914 <fputc>
 568:	e8 cf       	rjmp	.-48     	; 0x53a <vfprintf+0x4c>
 56a:	91 2c       	mov	r9, r1
 56c:	21 2c       	mov	r2, r1
 56e:	31 2c       	mov	r3, r1
 570:	ff e1       	ldi	r31, 0x1F	; 31
 572:	f3 15       	cp	r31, r3
 574:	d8 f0       	brcs	.+54     	; 0x5ac <vfprintf+0xbe>
 576:	8b 32       	cpi	r24, 0x2B	; 43
 578:	79 f0       	breq	.+30     	; 0x598 <vfprintf+0xaa>
 57a:	38 f4       	brcc	.+14     	; 0x58a <vfprintf+0x9c>
 57c:	80 32       	cpi	r24, 0x20	; 32
 57e:	79 f0       	breq	.+30     	; 0x59e <vfprintf+0xb0>
 580:	83 32       	cpi	r24, 0x23	; 35
 582:	a1 f4       	brne	.+40     	; 0x5ac <vfprintf+0xbe>
 584:	23 2d       	mov	r18, r3
 586:	20 61       	ori	r18, 0x10	; 16
 588:	1d c0       	rjmp	.+58     	; 0x5c4 <vfprintf+0xd6>
 58a:	8d 32       	cpi	r24, 0x2D	; 45
 58c:	61 f0       	breq	.+24     	; 0x5a6 <vfprintf+0xb8>
 58e:	80 33       	cpi	r24, 0x30	; 48
 590:	69 f4       	brne	.+26     	; 0x5ac <vfprintf+0xbe>
 592:	23 2d       	mov	r18, r3
 594:	21 60       	ori	r18, 0x01	; 1
 596:	16 c0       	rjmp	.+44     	; 0x5c4 <vfprintf+0xd6>
 598:	83 2d       	mov	r24, r3
 59a:	82 60       	ori	r24, 0x02	; 2
 59c:	38 2e       	mov	r3, r24
 59e:	e3 2d       	mov	r30, r3
 5a0:	e4 60       	ori	r30, 0x04	; 4
 5a2:	3e 2e       	mov	r3, r30
 5a4:	2a c0       	rjmp	.+84     	; 0x5fa <vfprintf+0x10c>
 5a6:	f3 2d       	mov	r31, r3
 5a8:	f8 60       	ori	r31, 0x08	; 8
 5aa:	1d c0       	rjmp	.+58     	; 0x5e6 <vfprintf+0xf8>
 5ac:	37 fc       	sbrc	r3, 7
 5ae:	2d c0       	rjmp	.+90     	; 0x60a <vfprintf+0x11c>
 5b0:	20 ed       	ldi	r18, 0xD0	; 208
 5b2:	28 0f       	add	r18, r24
 5b4:	2a 30       	cpi	r18, 0x0A	; 10
 5b6:	40 f0       	brcs	.+16     	; 0x5c8 <vfprintf+0xda>
 5b8:	8e 32       	cpi	r24, 0x2E	; 46
 5ba:	b9 f4       	brne	.+46     	; 0x5ea <vfprintf+0xfc>
 5bc:	36 fc       	sbrc	r3, 6
 5be:	75 c1       	rjmp	.+746    	; 0x8aa <vfprintf+0x3bc>
 5c0:	23 2d       	mov	r18, r3
 5c2:	20 64       	ori	r18, 0x40	; 64
 5c4:	32 2e       	mov	r3, r18
 5c6:	19 c0       	rjmp	.+50     	; 0x5fa <vfprintf+0x10c>
 5c8:	36 fe       	sbrs	r3, 6
 5ca:	06 c0       	rjmp	.+12     	; 0x5d8 <vfprintf+0xea>
 5cc:	8a e0       	ldi	r24, 0x0A	; 10
 5ce:	98 9e       	mul	r9, r24
 5d0:	20 0d       	add	r18, r0
 5d2:	11 24       	eor	r1, r1
 5d4:	92 2e       	mov	r9, r18
 5d6:	11 c0       	rjmp	.+34     	; 0x5fa <vfprintf+0x10c>
 5d8:	ea e0       	ldi	r30, 0x0A	; 10
 5da:	2e 9e       	mul	r2, r30
 5dc:	20 0d       	add	r18, r0
 5de:	11 24       	eor	r1, r1
 5e0:	22 2e       	mov	r2, r18
 5e2:	f3 2d       	mov	r31, r3
 5e4:	f0 62       	ori	r31, 0x20	; 32
 5e6:	3f 2e       	mov	r3, r31
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <vfprintf+0x10c>
 5ea:	8c 36       	cpi	r24, 0x6C	; 108
 5ec:	21 f4       	brne	.+8      	; 0x5f6 <vfprintf+0x108>
 5ee:	83 2d       	mov	r24, r3
 5f0:	80 68       	ori	r24, 0x80	; 128
 5f2:	38 2e       	mov	r3, r24
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <vfprintf+0x10c>
 5f6:	88 36       	cpi	r24, 0x68	; 104
 5f8:	41 f4       	brne	.+16     	; 0x60a <vfprintf+0x11c>
 5fa:	f7 01       	movw	r30, r14
 5fc:	93 fd       	sbrc	r25, 3
 5fe:	85 91       	lpm	r24, Z+
 600:	93 ff       	sbrs	r25, 3
 602:	81 91       	ld	r24, Z+
 604:	7f 01       	movw	r14, r30
 606:	81 11       	cpse	r24, r1
 608:	b3 cf       	rjmp	.-154    	; 0x570 <vfprintf+0x82>
 60a:	98 2f       	mov	r25, r24
 60c:	9f 7d       	andi	r25, 0xDF	; 223
 60e:	95 54       	subi	r25, 0x45	; 69
 610:	93 30       	cpi	r25, 0x03	; 3
 612:	28 f4       	brcc	.+10     	; 0x61e <vfprintf+0x130>
 614:	0c 5f       	subi	r16, 0xFC	; 252
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	9f e3       	ldi	r25, 0x3F	; 63
 61a:	99 83       	std	Y+1, r25	; 0x01
 61c:	0d c0       	rjmp	.+26     	; 0x638 <vfprintf+0x14a>
 61e:	83 36       	cpi	r24, 0x63	; 99
 620:	31 f0       	breq	.+12     	; 0x62e <vfprintf+0x140>
 622:	83 37       	cpi	r24, 0x73	; 115
 624:	71 f0       	breq	.+28     	; 0x642 <vfprintf+0x154>
 626:	83 35       	cpi	r24, 0x53	; 83
 628:	09 f0       	breq	.+2      	; 0x62c <vfprintf+0x13e>
 62a:	55 c0       	rjmp	.+170    	; 0x6d6 <vfprintf+0x1e8>
 62c:	20 c0       	rjmp	.+64     	; 0x66e <vfprintf+0x180>
 62e:	f8 01       	movw	r30, r16
 630:	80 81       	ld	r24, Z
 632:	89 83       	std	Y+1, r24	; 0x01
 634:	0e 5f       	subi	r16, 0xFE	; 254
 636:	1f 4f       	sbci	r17, 0xFF	; 255
 638:	88 24       	eor	r8, r8
 63a:	83 94       	inc	r8
 63c:	91 2c       	mov	r9, r1
 63e:	53 01       	movw	r10, r6
 640:	12 c0       	rjmp	.+36     	; 0x666 <vfprintf+0x178>
 642:	28 01       	movw	r4, r16
 644:	f2 e0       	ldi	r31, 0x02	; 2
 646:	4f 0e       	add	r4, r31
 648:	51 1c       	adc	r5, r1
 64a:	f8 01       	movw	r30, r16
 64c:	a0 80       	ld	r10, Z
 64e:	b1 80       	ldd	r11, Z+1	; 0x01
 650:	36 fe       	sbrs	r3, 6
 652:	03 c0       	rjmp	.+6      	; 0x65a <vfprintf+0x16c>
 654:	69 2d       	mov	r22, r9
 656:	70 e0       	ldi	r23, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <vfprintf+0x170>
 65a:	6f ef       	ldi	r22, 0xFF	; 255
 65c:	7f ef       	ldi	r23, 0xFF	; 255
 65e:	c5 01       	movw	r24, r10
 660:	4e d1       	rcall	.+668    	; 0x8fe <strnlen>
 662:	4c 01       	movw	r8, r24
 664:	82 01       	movw	r16, r4
 666:	f3 2d       	mov	r31, r3
 668:	ff 77       	andi	r31, 0x7F	; 127
 66a:	3f 2e       	mov	r3, r31
 66c:	15 c0       	rjmp	.+42     	; 0x698 <vfprintf+0x1aa>
 66e:	28 01       	movw	r4, r16
 670:	22 e0       	ldi	r18, 0x02	; 2
 672:	42 0e       	add	r4, r18
 674:	51 1c       	adc	r5, r1
 676:	f8 01       	movw	r30, r16
 678:	a0 80       	ld	r10, Z
 67a:	b1 80       	ldd	r11, Z+1	; 0x01
 67c:	36 fe       	sbrs	r3, 6
 67e:	03 c0       	rjmp	.+6      	; 0x686 <vfprintf+0x198>
 680:	69 2d       	mov	r22, r9
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	02 c0       	rjmp	.+4      	; 0x68a <vfprintf+0x19c>
 686:	6f ef       	ldi	r22, 0xFF	; 255
 688:	7f ef       	ldi	r23, 0xFF	; 255
 68a:	c5 01       	movw	r24, r10
 68c:	2d d1       	rcall	.+602    	; 0x8e8 <strnlen_P>
 68e:	4c 01       	movw	r8, r24
 690:	f3 2d       	mov	r31, r3
 692:	f0 68       	ori	r31, 0x80	; 128
 694:	3f 2e       	mov	r3, r31
 696:	82 01       	movw	r16, r4
 698:	33 fc       	sbrc	r3, 3
 69a:	19 c0       	rjmp	.+50     	; 0x6ce <vfprintf+0x1e0>
 69c:	82 2d       	mov	r24, r2
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	88 16       	cp	r8, r24
 6a2:	99 06       	cpc	r9, r25
 6a4:	a0 f4       	brcc	.+40     	; 0x6ce <vfprintf+0x1e0>
 6a6:	b6 01       	movw	r22, r12
 6a8:	80 e2       	ldi	r24, 0x20	; 32
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	33 d1       	rcall	.+614    	; 0x914 <fputc>
 6ae:	2a 94       	dec	r2
 6b0:	f5 cf       	rjmp	.-22     	; 0x69c <vfprintf+0x1ae>
 6b2:	f5 01       	movw	r30, r10
 6b4:	37 fc       	sbrc	r3, 7
 6b6:	85 91       	lpm	r24, Z+
 6b8:	37 fe       	sbrs	r3, 7
 6ba:	81 91       	ld	r24, Z+
 6bc:	5f 01       	movw	r10, r30
 6be:	b6 01       	movw	r22, r12
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	28 d1       	rcall	.+592    	; 0x914 <fputc>
 6c4:	21 10       	cpse	r2, r1
 6c6:	2a 94       	dec	r2
 6c8:	21 e0       	ldi	r18, 0x01	; 1
 6ca:	82 1a       	sub	r8, r18
 6cc:	91 08       	sbc	r9, r1
 6ce:	81 14       	cp	r8, r1
 6d0:	91 04       	cpc	r9, r1
 6d2:	79 f7       	brne	.-34     	; 0x6b2 <vfprintf+0x1c4>
 6d4:	e1 c0       	rjmp	.+450    	; 0x898 <vfprintf+0x3aa>
 6d6:	84 36       	cpi	r24, 0x64	; 100
 6d8:	11 f0       	breq	.+4      	; 0x6de <vfprintf+0x1f0>
 6da:	89 36       	cpi	r24, 0x69	; 105
 6dc:	39 f5       	brne	.+78     	; 0x72c <vfprintf+0x23e>
 6de:	f8 01       	movw	r30, r16
 6e0:	37 fe       	sbrs	r3, 7
 6e2:	07 c0       	rjmp	.+14     	; 0x6f2 <vfprintf+0x204>
 6e4:	60 81       	ld	r22, Z
 6e6:	71 81       	ldd	r23, Z+1	; 0x01
 6e8:	82 81       	ldd	r24, Z+2	; 0x02
 6ea:	93 81       	ldd	r25, Z+3	; 0x03
 6ec:	0c 5f       	subi	r16, 0xFC	; 252
 6ee:	1f 4f       	sbci	r17, 0xFF	; 255
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <vfprintf+0x214>
 6f2:	60 81       	ld	r22, Z
 6f4:	71 81       	ldd	r23, Z+1	; 0x01
 6f6:	07 2e       	mov	r0, r23
 6f8:	00 0c       	add	r0, r0
 6fa:	88 0b       	sbc	r24, r24
 6fc:	99 0b       	sbc	r25, r25
 6fe:	0e 5f       	subi	r16, 0xFE	; 254
 700:	1f 4f       	sbci	r17, 0xFF	; 255
 702:	f3 2d       	mov	r31, r3
 704:	ff 76       	andi	r31, 0x6F	; 111
 706:	3f 2e       	mov	r3, r31
 708:	97 ff       	sbrs	r25, 7
 70a:	09 c0       	rjmp	.+18     	; 0x71e <vfprintf+0x230>
 70c:	90 95       	com	r25
 70e:	80 95       	com	r24
 710:	70 95       	com	r23
 712:	61 95       	neg	r22
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	8f 4f       	sbci	r24, 0xFF	; 255
 718:	9f 4f       	sbci	r25, 0xFF	; 255
 71a:	f0 68       	ori	r31, 0x80	; 128
 71c:	3f 2e       	mov	r3, r31
 71e:	2a e0       	ldi	r18, 0x0A	; 10
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	a3 01       	movw	r20, r6
 724:	33 d1       	rcall	.+614    	; 0x98c <__ultoa_invert>
 726:	88 2e       	mov	r8, r24
 728:	86 18       	sub	r8, r6
 72a:	44 c0       	rjmp	.+136    	; 0x7b4 <vfprintf+0x2c6>
 72c:	85 37       	cpi	r24, 0x75	; 117
 72e:	31 f4       	brne	.+12     	; 0x73c <vfprintf+0x24e>
 730:	23 2d       	mov	r18, r3
 732:	2f 7e       	andi	r18, 0xEF	; 239
 734:	b2 2e       	mov	r11, r18
 736:	2a e0       	ldi	r18, 0x0A	; 10
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	25 c0       	rjmp	.+74     	; 0x786 <vfprintf+0x298>
 73c:	93 2d       	mov	r25, r3
 73e:	99 7f       	andi	r25, 0xF9	; 249
 740:	b9 2e       	mov	r11, r25
 742:	8f 36       	cpi	r24, 0x6F	; 111
 744:	c1 f0       	breq	.+48     	; 0x776 <vfprintf+0x288>
 746:	18 f4       	brcc	.+6      	; 0x74e <vfprintf+0x260>
 748:	88 35       	cpi	r24, 0x58	; 88
 74a:	79 f0       	breq	.+30     	; 0x76a <vfprintf+0x27c>
 74c:	ae c0       	rjmp	.+348    	; 0x8aa <vfprintf+0x3bc>
 74e:	80 37       	cpi	r24, 0x70	; 112
 750:	19 f0       	breq	.+6      	; 0x758 <vfprintf+0x26a>
 752:	88 37       	cpi	r24, 0x78	; 120
 754:	21 f0       	breq	.+8      	; 0x75e <vfprintf+0x270>
 756:	a9 c0       	rjmp	.+338    	; 0x8aa <vfprintf+0x3bc>
 758:	e9 2f       	mov	r30, r25
 75a:	e0 61       	ori	r30, 0x10	; 16
 75c:	be 2e       	mov	r11, r30
 75e:	b4 fe       	sbrs	r11, 4
 760:	0d c0       	rjmp	.+26     	; 0x77c <vfprintf+0x28e>
 762:	fb 2d       	mov	r31, r11
 764:	f4 60       	ori	r31, 0x04	; 4
 766:	bf 2e       	mov	r11, r31
 768:	09 c0       	rjmp	.+18     	; 0x77c <vfprintf+0x28e>
 76a:	34 fe       	sbrs	r3, 4
 76c:	0a c0       	rjmp	.+20     	; 0x782 <vfprintf+0x294>
 76e:	29 2f       	mov	r18, r25
 770:	26 60       	ori	r18, 0x06	; 6
 772:	b2 2e       	mov	r11, r18
 774:	06 c0       	rjmp	.+12     	; 0x782 <vfprintf+0x294>
 776:	28 e0       	ldi	r18, 0x08	; 8
 778:	30 e0       	ldi	r19, 0x00	; 0
 77a:	05 c0       	rjmp	.+10     	; 0x786 <vfprintf+0x298>
 77c:	20 e1       	ldi	r18, 0x10	; 16
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	02 c0       	rjmp	.+4      	; 0x786 <vfprintf+0x298>
 782:	20 e1       	ldi	r18, 0x10	; 16
 784:	32 e0       	ldi	r19, 0x02	; 2
 786:	f8 01       	movw	r30, r16
 788:	b7 fe       	sbrs	r11, 7
 78a:	07 c0       	rjmp	.+14     	; 0x79a <vfprintf+0x2ac>
 78c:	60 81       	ld	r22, Z
 78e:	71 81       	ldd	r23, Z+1	; 0x01
 790:	82 81       	ldd	r24, Z+2	; 0x02
 792:	93 81       	ldd	r25, Z+3	; 0x03
 794:	0c 5f       	subi	r16, 0xFC	; 252
 796:	1f 4f       	sbci	r17, 0xFF	; 255
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0x2b8>
 79a:	60 81       	ld	r22, Z
 79c:	71 81       	ldd	r23, Z+1	; 0x01
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	0e 5f       	subi	r16, 0xFE	; 254
 7a4:	1f 4f       	sbci	r17, 0xFF	; 255
 7a6:	a3 01       	movw	r20, r6
 7a8:	f1 d0       	rcall	.+482    	; 0x98c <__ultoa_invert>
 7aa:	88 2e       	mov	r8, r24
 7ac:	86 18       	sub	r8, r6
 7ae:	fb 2d       	mov	r31, r11
 7b0:	ff 77       	andi	r31, 0x7F	; 127
 7b2:	3f 2e       	mov	r3, r31
 7b4:	36 fe       	sbrs	r3, 6
 7b6:	0d c0       	rjmp	.+26     	; 0x7d2 <vfprintf+0x2e4>
 7b8:	23 2d       	mov	r18, r3
 7ba:	2e 7f       	andi	r18, 0xFE	; 254
 7bc:	a2 2e       	mov	r10, r18
 7be:	89 14       	cp	r8, r9
 7c0:	58 f4       	brcc	.+22     	; 0x7d8 <vfprintf+0x2ea>
 7c2:	34 fe       	sbrs	r3, 4
 7c4:	0b c0       	rjmp	.+22     	; 0x7dc <vfprintf+0x2ee>
 7c6:	32 fc       	sbrc	r3, 2
 7c8:	09 c0       	rjmp	.+18     	; 0x7dc <vfprintf+0x2ee>
 7ca:	83 2d       	mov	r24, r3
 7cc:	8e 7e       	andi	r24, 0xEE	; 238
 7ce:	a8 2e       	mov	r10, r24
 7d0:	05 c0       	rjmp	.+10     	; 0x7dc <vfprintf+0x2ee>
 7d2:	b8 2c       	mov	r11, r8
 7d4:	a3 2c       	mov	r10, r3
 7d6:	03 c0       	rjmp	.+6      	; 0x7de <vfprintf+0x2f0>
 7d8:	b8 2c       	mov	r11, r8
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x2f0>
 7dc:	b9 2c       	mov	r11, r9
 7de:	a4 fe       	sbrs	r10, 4
 7e0:	0f c0       	rjmp	.+30     	; 0x800 <vfprintf+0x312>
 7e2:	fe 01       	movw	r30, r28
 7e4:	e8 0d       	add	r30, r8
 7e6:	f1 1d       	adc	r31, r1
 7e8:	80 81       	ld	r24, Z
 7ea:	80 33       	cpi	r24, 0x30	; 48
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <vfprintf+0x308>
 7ee:	9a 2d       	mov	r25, r10
 7f0:	99 7e       	andi	r25, 0xE9	; 233
 7f2:	a9 2e       	mov	r10, r25
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <vfprintf+0x31a>
 7f6:	a2 fe       	sbrs	r10, 2
 7f8:	06 c0       	rjmp	.+12     	; 0x806 <vfprintf+0x318>
 7fa:	b3 94       	inc	r11
 7fc:	b3 94       	inc	r11
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <vfprintf+0x31a>
 800:	8a 2d       	mov	r24, r10
 802:	86 78       	andi	r24, 0x86	; 134
 804:	09 f0       	breq	.+2      	; 0x808 <vfprintf+0x31a>
 806:	b3 94       	inc	r11
 808:	a3 fc       	sbrc	r10, 3
 80a:	10 c0       	rjmp	.+32     	; 0x82c <vfprintf+0x33e>
 80c:	a0 fe       	sbrs	r10, 0
 80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0x32e>
 810:	b2 14       	cp	r11, r2
 812:	80 f4       	brcc	.+32     	; 0x834 <vfprintf+0x346>
 814:	28 0c       	add	r2, r8
 816:	92 2c       	mov	r9, r2
 818:	9b 18       	sub	r9, r11
 81a:	0d c0       	rjmp	.+26     	; 0x836 <vfprintf+0x348>
 81c:	b2 14       	cp	r11, r2
 81e:	58 f4       	brcc	.+22     	; 0x836 <vfprintf+0x348>
 820:	b6 01       	movw	r22, r12
 822:	80 e2       	ldi	r24, 0x20	; 32
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	76 d0       	rcall	.+236    	; 0x914 <fputc>
 828:	b3 94       	inc	r11
 82a:	f8 cf       	rjmp	.-16     	; 0x81c <vfprintf+0x32e>
 82c:	b2 14       	cp	r11, r2
 82e:	18 f4       	brcc	.+6      	; 0x836 <vfprintf+0x348>
 830:	2b 18       	sub	r2, r11
 832:	02 c0       	rjmp	.+4      	; 0x838 <vfprintf+0x34a>
 834:	98 2c       	mov	r9, r8
 836:	21 2c       	mov	r2, r1
 838:	a4 fe       	sbrs	r10, 4
 83a:	0f c0       	rjmp	.+30     	; 0x85a <vfprintf+0x36c>
 83c:	b6 01       	movw	r22, r12
 83e:	80 e3       	ldi	r24, 0x30	; 48
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	68 d0       	rcall	.+208    	; 0x914 <fputc>
 844:	a2 fe       	sbrs	r10, 2
 846:	16 c0       	rjmp	.+44     	; 0x874 <vfprintf+0x386>
 848:	a1 fc       	sbrc	r10, 1
 84a:	03 c0       	rjmp	.+6      	; 0x852 <vfprintf+0x364>
 84c:	88 e7       	ldi	r24, 0x78	; 120
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <vfprintf+0x368>
 852:	88 e5       	ldi	r24, 0x58	; 88
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	b6 01       	movw	r22, r12
 858:	0c c0       	rjmp	.+24     	; 0x872 <vfprintf+0x384>
 85a:	8a 2d       	mov	r24, r10
 85c:	86 78       	andi	r24, 0x86	; 134
 85e:	51 f0       	breq	.+20     	; 0x874 <vfprintf+0x386>
 860:	a1 fe       	sbrs	r10, 1
 862:	02 c0       	rjmp	.+4      	; 0x868 <vfprintf+0x37a>
 864:	8b e2       	ldi	r24, 0x2B	; 43
 866:	01 c0       	rjmp	.+2      	; 0x86a <vfprintf+0x37c>
 868:	80 e2       	ldi	r24, 0x20	; 32
 86a:	a7 fc       	sbrc	r10, 7
 86c:	8d e2       	ldi	r24, 0x2D	; 45
 86e:	b6 01       	movw	r22, r12
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	50 d0       	rcall	.+160    	; 0x914 <fputc>
 874:	89 14       	cp	r8, r9
 876:	30 f4       	brcc	.+12     	; 0x884 <vfprintf+0x396>
 878:	b6 01       	movw	r22, r12
 87a:	80 e3       	ldi	r24, 0x30	; 48
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	4a d0       	rcall	.+148    	; 0x914 <fputc>
 880:	9a 94       	dec	r9
 882:	f8 cf       	rjmp	.-16     	; 0x874 <vfprintf+0x386>
 884:	8a 94       	dec	r8
 886:	f3 01       	movw	r30, r6
 888:	e8 0d       	add	r30, r8
 88a:	f1 1d       	adc	r31, r1
 88c:	80 81       	ld	r24, Z
 88e:	b6 01       	movw	r22, r12
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	40 d0       	rcall	.+128    	; 0x914 <fputc>
 894:	81 10       	cpse	r8, r1
 896:	f6 cf       	rjmp	.-20     	; 0x884 <vfprintf+0x396>
 898:	22 20       	and	r2, r2
 89a:	09 f4       	brne	.+2      	; 0x89e <vfprintf+0x3b0>
 89c:	4e ce       	rjmp	.-868    	; 0x53a <vfprintf+0x4c>
 89e:	b6 01       	movw	r22, r12
 8a0:	80 e2       	ldi	r24, 0x20	; 32
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	37 d0       	rcall	.+110    	; 0x914 <fputc>
 8a6:	2a 94       	dec	r2
 8a8:	f7 cf       	rjmp	.-18     	; 0x898 <vfprintf+0x3aa>
 8aa:	f6 01       	movw	r30, r12
 8ac:	86 81       	ldd	r24, Z+6	; 0x06
 8ae:	97 81       	ldd	r25, Z+7	; 0x07
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <vfprintf+0x3c8>
 8b2:	8f ef       	ldi	r24, 0xFF	; 255
 8b4:	9f ef       	ldi	r25, 0xFF	; 255
 8b6:	2b 96       	adiw	r28, 0x0b	; 11
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	de bf       	out	0x3e, r29	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	cd bf       	out	0x3d, r28	; 61
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	ef 90       	pop	r14
 8ce:	df 90       	pop	r13
 8d0:	cf 90       	pop	r12
 8d2:	bf 90       	pop	r11
 8d4:	af 90       	pop	r10
 8d6:	9f 90       	pop	r9
 8d8:	8f 90       	pop	r8
 8da:	7f 90       	pop	r7
 8dc:	6f 90       	pop	r6
 8de:	5f 90       	pop	r5
 8e0:	4f 90       	pop	r4
 8e2:	3f 90       	pop	r3
 8e4:	2f 90       	pop	r2
 8e6:	08 95       	ret

000008e8 <strnlen_P>:
 8e8:	fc 01       	movw	r30, r24
 8ea:	05 90       	lpm	r0, Z+
 8ec:	61 50       	subi	r22, 0x01	; 1
 8ee:	70 40       	sbci	r23, 0x00	; 0
 8f0:	01 10       	cpse	r0, r1
 8f2:	d8 f7       	brcc	.-10     	; 0x8ea <strnlen_P+0x2>
 8f4:	80 95       	com	r24
 8f6:	90 95       	com	r25
 8f8:	8e 0f       	add	r24, r30
 8fa:	9f 1f       	adc	r25, r31
 8fc:	08 95       	ret

000008fe <strnlen>:
 8fe:	fc 01       	movw	r30, r24
 900:	61 50       	subi	r22, 0x01	; 1
 902:	70 40       	sbci	r23, 0x00	; 0
 904:	01 90       	ld	r0, Z+
 906:	01 10       	cpse	r0, r1
 908:	d8 f7       	brcc	.-10     	; 0x900 <strnlen+0x2>
 90a:	80 95       	com	r24
 90c:	90 95       	com	r25
 90e:	8e 0f       	add	r24, r30
 910:	9f 1f       	adc	r25, r31
 912:	08 95       	ret

00000914 <fputc>:
 914:	0f 93       	push	r16
 916:	1f 93       	push	r17
 918:	cf 93       	push	r28
 91a:	df 93       	push	r29
 91c:	fb 01       	movw	r30, r22
 91e:	23 81       	ldd	r18, Z+3	; 0x03
 920:	21 fd       	sbrc	r18, 1
 922:	03 c0       	rjmp	.+6      	; 0x92a <fputc+0x16>
 924:	8f ef       	ldi	r24, 0xFF	; 255
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	2c c0       	rjmp	.+88     	; 0x982 <fputc+0x6e>
 92a:	22 ff       	sbrs	r18, 2
 92c:	16 c0       	rjmp	.+44     	; 0x95a <fputc+0x46>
 92e:	46 81       	ldd	r20, Z+6	; 0x06
 930:	57 81       	ldd	r21, Z+7	; 0x07
 932:	24 81       	ldd	r18, Z+4	; 0x04
 934:	35 81       	ldd	r19, Z+5	; 0x05
 936:	42 17       	cp	r20, r18
 938:	53 07       	cpc	r21, r19
 93a:	44 f4       	brge	.+16     	; 0x94c <fputc+0x38>
 93c:	a0 81       	ld	r26, Z
 93e:	b1 81       	ldd	r27, Z+1	; 0x01
 940:	9d 01       	movw	r18, r26
 942:	2f 5f       	subi	r18, 0xFF	; 255
 944:	3f 4f       	sbci	r19, 0xFF	; 255
 946:	31 83       	std	Z+1, r19	; 0x01
 948:	20 83       	st	Z, r18
 94a:	8c 93       	st	X, r24
 94c:	26 81       	ldd	r18, Z+6	; 0x06
 94e:	37 81       	ldd	r19, Z+7	; 0x07
 950:	2f 5f       	subi	r18, 0xFF	; 255
 952:	3f 4f       	sbci	r19, 0xFF	; 255
 954:	37 83       	std	Z+7, r19	; 0x07
 956:	26 83       	std	Z+6, r18	; 0x06
 958:	14 c0       	rjmp	.+40     	; 0x982 <fputc+0x6e>
 95a:	8b 01       	movw	r16, r22
 95c:	ec 01       	movw	r28, r24
 95e:	fb 01       	movw	r30, r22
 960:	00 84       	ldd	r0, Z+8	; 0x08
 962:	f1 85       	ldd	r31, Z+9	; 0x09
 964:	e0 2d       	mov	r30, r0
 966:	09 95       	icall
 968:	89 2b       	or	r24, r25
 96a:	e1 f6       	brne	.-72     	; 0x924 <fputc+0x10>
 96c:	d8 01       	movw	r26, r16
 96e:	16 96       	adiw	r26, 0x06	; 6
 970:	8d 91       	ld	r24, X+
 972:	9c 91       	ld	r25, X
 974:	17 97       	sbiw	r26, 0x07	; 7
 976:	01 96       	adiw	r24, 0x01	; 1
 978:	17 96       	adiw	r26, 0x07	; 7
 97a:	9c 93       	st	X, r25
 97c:	8e 93       	st	-X, r24
 97e:	16 97       	sbiw	r26, 0x06	; 6
 980:	ce 01       	movw	r24, r28
 982:	df 91       	pop	r29
 984:	cf 91       	pop	r28
 986:	1f 91       	pop	r17
 988:	0f 91       	pop	r16
 98a:	08 95       	ret

0000098c <__ultoa_invert>:
 98c:	fa 01       	movw	r30, r20
 98e:	aa 27       	eor	r26, r26
 990:	28 30       	cpi	r18, 0x08	; 8
 992:	51 f1       	breq	.+84     	; 0x9e8 <__ultoa_invert+0x5c>
 994:	20 31       	cpi	r18, 0x10	; 16
 996:	81 f1       	breq	.+96     	; 0x9f8 <__ultoa_invert+0x6c>
 998:	e8 94       	clt
 99a:	6f 93       	push	r22
 99c:	6e 7f       	andi	r22, 0xFE	; 254
 99e:	6e 5f       	subi	r22, 0xFE	; 254
 9a0:	7f 4f       	sbci	r23, 0xFF	; 255
 9a2:	8f 4f       	sbci	r24, 0xFF	; 255
 9a4:	9f 4f       	sbci	r25, 0xFF	; 255
 9a6:	af 4f       	sbci	r26, 0xFF	; 255
 9a8:	b1 e0       	ldi	r27, 0x01	; 1
 9aa:	3e d0       	rcall	.+124    	; 0xa28 <__ultoa_invert+0x9c>
 9ac:	b4 e0       	ldi	r27, 0x04	; 4
 9ae:	3c d0       	rcall	.+120    	; 0xa28 <__ultoa_invert+0x9c>
 9b0:	67 0f       	add	r22, r23
 9b2:	78 1f       	adc	r23, r24
 9b4:	89 1f       	adc	r24, r25
 9b6:	9a 1f       	adc	r25, r26
 9b8:	a1 1d       	adc	r26, r1
 9ba:	68 0f       	add	r22, r24
 9bc:	79 1f       	adc	r23, r25
 9be:	8a 1f       	adc	r24, r26
 9c0:	91 1d       	adc	r25, r1
 9c2:	a1 1d       	adc	r26, r1
 9c4:	6a 0f       	add	r22, r26
 9c6:	71 1d       	adc	r23, r1
 9c8:	81 1d       	adc	r24, r1
 9ca:	91 1d       	adc	r25, r1
 9cc:	a1 1d       	adc	r26, r1
 9ce:	20 d0       	rcall	.+64     	; 0xa10 <__ultoa_invert+0x84>
 9d0:	09 f4       	brne	.+2      	; 0x9d4 <__ultoa_invert+0x48>
 9d2:	68 94       	set
 9d4:	3f 91       	pop	r19
 9d6:	2a e0       	ldi	r18, 0x0A	; 10
 9d8:	26 9f       	mul	r18, r22
 9da:	11 24       	eor	r1, r1
 9dc:	30 19       	sub	r19, r0
 9de:	30 5d       	subi	r19, 0xD0	; 208
 9e0:	31 93       	st	Z+, r19
 9e2:	de f6       	brtc	.-74     	; 0x99a <__ultoa_invert+0xe>
 9e4:	cf 01       	movw	r24, r30
 9e6:	08 95       	ret
 9e8:	46 2f       	mov	r20, r22
 9ea:	47 70       	andi	r20, 0x07	; 7
 9ec:	40 5d       	subi	r20, 0xD0	; 208
 9ee:	41 93       	st	Z+, r20
 9f0:	b3 e0       	ldi	r27, 0x03	; 3
 9f2:	0f d0       	rcall	.+30     	; 0xa12 <__ultoa_invert+0x86>
 9f4:	c9 f7       	brne	.-14     	; 0x9e8 <__ultoa_invert+0x5c>
 9f6:	f6 cf       	rjmp	.-20     	; 0x9e4 <__ultoa_invert+0x58>
 9f8:	46 2f       	mov	r20, r22
 9fa:	4f 70       	andi	r20, 0x0F	; 15
 9fc:	40 5d       	subi	r20, 0xD0	; 208
 9fe:	4a 33       	cpi	r20, 0x3A	; 58
 a00:	18 f0       	brcs	.+6      	; 0xa08 <__ultoa_invert+0x7c>
 a02:	49 5d       	subi	r20, 0xD9	; 217
 a04:	31 fd       	sbrc	r19, 1
 a06:	40 52       	subi	r20, 0x20	; 32
 a08:	41 93       	st	Z+, r20
 a0a:	02 d0       	rcall	.+4      	; 0xa10 <__ultoa_invert+0x84>
 a0c:	a9 f7       	brne	.-22     	; 0x9f8 <__ultoa_invert+0x6c>
 a0e:	ea cf       	rjmp	.-44     	; 0x9e4 <__ultoa_invert+0x58>
 a10:	b4 e0       	ldi	r27, 0x04	; 4
 a12:	a6 95       	lsr	r26
 a14:	97 95       	ror	r25
 a16:	87 95       	ror	r24
 a18:	77 95       	ror	r23
 a1a:	67 95       	ror	r22
 a1c:	ba 95       	dec	r27
 a1e:	c9 f7       	brne	.-14     	; 0xa12 <__ultoa_invert+0x86>
 a20:	00 97       	sbiw	r24, 0x00	; 0
 a22:	61 05       	cpc	r22, r1
 a24:	71 05       	cpc	r23, r1
 a26:	08 95       	ret
 a28:	9b 01       	movw	r18, r22
 a2a:	ac 01       	movw	r20, r24
 a2c:	0a 2e       	mov	r0, r26
 a2e:	06 94       	lsr	r0
 a30:	57 95       	ror	r21
 a32:	47 95       	ror	r20
 a34:	37 95       	ror	r19
 a36:	27 95       	ror	r18
 a38:	ba 95       	dec	r27
 a3a:	c9 f7       	brne	.-14     	; 0xa2e <__ultoa_invert+0xa2>
 a3c:	62 0f       	add	r22, r18
 a3e:	73 1f       	adc	r23, r19
 a40:	84 1f       	adc	r24, r20
 a42:	95 1f       	adc	r25, r21
 a44:	a0 1d       	adc	r26, r0
 a46:	08 95       	ret

00000a48 <_exit>:
 a48:	f8 94       	cli

00000a4a <__stop_program>:
 a4a:	ff cf       	rjmp	.-2      	; 0xa4a <__stop_program>
